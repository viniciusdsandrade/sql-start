-- Lista bairros distintos da tabela de vendedores
SELECT DISTINCT BAIRRO
FROM TABELA_DE_VENDEDORES;

-- Lista todos os clientes em bairros específicos
SELECT *
FROM TABELA_DE_CLIENTES
WHERE BAIRRO IN (
                 'Copacabana', 'Jardins', 'Santo Amaro', 'Tijuca'
    );

-- Consulta 3: Lista clientes em bairros que também são bairros de vendedores
SELECT *
FROM TABELA_DE_CLIENTES
WHERE BAIRRO IN (SELECT BAIRRO
                 FROM TABELA_DE_VENDEDORES);

-- Sabores dos produtos mais vendidos
SELECT INF.CODIGO_DO_PRODUTO, TP.NOME_DO_PRODUTO, SUM(INF.QUANTIDADE) AS QUANTIDADE
FROM ITENS_NOTAS_FISCAIS INF
         INNER JOIN TABELA_DE_PRODUTOS TP
                    ON INF.CODIGO_DO_PRODUTO = TP.CODIGO_DO_PRODUTO
GROUP BY INF.CODIGO_DO_PRODUTO, TP.NOME_DO_PRODUTO
HAVING SUM(INF.QUANTIDADE) > 394000
ORDER BY SUM(INF.QUANTIDADE) DESC;

-- Produtos cuja soma das vendas são maiores que 394000.
-- Levando isso em consideração, 
-- liste os sabores destes produtos que são selecionados nesta consulta.
SELECT DISTINCT SABOR
FROM TABELA_DE_PRODUTOS
WHERE CODIGO_DO_PRODUTO IN (SELECT INF.CODIGO_DO_PRODUTO
                            FROM ITENS_NOTAS_FISCAIS INF
                                     INNER JOIN TABELA_DE_PRODUTOS TP
                                                ON INF.CODIGO_DO_PRODUTO = TP.CODIGO_DO_PRODUTO
                            GROUP BY INF.CODIGO_DO_PRODUTO, TP.NOME_DO_PRODUTO
                            HAVING SUM(INF.QUANTIDADE) > 394000);


-- SUBCONSULTAS SUBSTITUEM O 'HAVING'

-- SUBCONSULTAS SUBSTITUEM O 'HAVING'
--  Demonstração de como subconsultas substituem o 'HAVING'.
SELECT EMBALAGEM, AVG(PRECO_DE_LISTA) AS 'R$ médio'
FROM TABELA_DE_PRODUTOS
GROUP BY EMBALAGEM

-- Usando 'HAVING' para filtrar médias de preços menores ou iguais a 10.
SELECT EMBALAGEM, AVG(PRECO_DE_LISTA) AS 'R$ médio'
FROM TABELA_DE_PRODUTOS
GROUP BY EMBALAGEM
HAVING AVG(PRECO_DE_LISTA) <= 10;

-- Substituição do 'HAVING' por subconsulta para obter médias de preços menores ou iguais a 10.
SELECT MEDIA_EMBALAGENS.EMBALAGEM, MEDIA_EMBALAGENS.PRECO_MEDIO
FROM (SELECT EMBALAGEM, AVG(PRECO_DE_LISTA) AS PRECO_MEDIO
      FROM TABELA_DE_PRODUTOS
      GROUP BY EMBALAGEM) MEDIA_EMBALAGENS
WHERE MEDIA_EMBALAGENS.PRECO_MEDIO <= 10;

-- Substituicao da subconsulta por uma visão para otimizar resultado
SELECT EMBALAGEM, PRECO_MEDIO
FROM MEDIA_EMBALAGENS
WHERE PRECO_MEDIO <= 10;


--  Listando produtos mais vendidos com 'HAVING'.
SELECT INF.CODIGO_DO_PRODUTO, TP.NOME_DO_PRODUTO, SUM(INF.QUANTIDADE) AS QUANTIDADE
FROM ITENS_NOTAS_FISCAIS INF
         INNER JOIN TABELA_DE_PRODUTOS TP
                    ON INF.CODIGO_DO_PRODUTO = TP.CODIGO_DO_PRODUTO
GROUP BY INF.CODIGO_DO_PRODUTO, TP.NOME_DO_PRODUTO
HAVING SUM(INF.QUANTIDADE) > 394000
ORDER BY SUM(INF.QUANTIDADE) DESC;

-- Listando produtos mais vendidos com VIEWS
SELECT *
FROM VW_QUANTIDADE_PRODUTOS
WHERE QUANTIDADE_TOTAL > 394000
ORDER BY QUANTIDADE_TOTAL DESC;

-- Substituição do 'HAVING' por subconsulta para listar produtos mais vendidos.
SELECT SC.CODIGO_DO_PRODUTO, SC.NOME_DO_PRODUTO, SC.QUANTIDADE_TOTAL
FROM (SELECT INF.CODIGO_DO_PRODUTO, TP.NOME_DO_PRODUTO, SUM(INF.QUANTIDADE) AS QUANTIDADE_TOTAL
      FROM ITENS_NOTAS_FISCAIS INF
               INNER JOIN TABELA_DE_PRODUTOS TP
                          ON INF.CODIGO_DO_PRODUTO = TP.CODIGO_DO_PRODUTO
      GROUP BY INF.CODIGO_DO_PRODUTO, TP.NOME_DO_PRODUTO) SC
WHERE SC.QUANTIDADE_TOTAL > 394000
ORDER BY SC.QUANTIDADE_TOTAL DESC;



SELECT *
FROM VW_QUANTIDADE_PRODUTOS
WHERE QUANTIDADE_TOTAL > 394000
ORDER BY QUANTIDADE_TOTAL DESC;

